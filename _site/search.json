[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "main",
    "section": "",
    "text": "# Filter columns that are not 100% missing\nfiltered_data &lt;- merged[, missing_percentage &lt; 1]\n\n# Apply describe function from psych package to get detailed statistics\ndescriptive_stats &lt;- describe(filtered_data[sapply(filtered_data, is.numeric)])\n\n# Print results\nprint(descriptive_stats)\n\n                                         vars    n    mean    sd  median\nAGE_AT_SERVICE_START                        1 3985   16.71  1.52   16.87\nAGE_AT_FIRST_REFERRAL_DATE                  2 3985   14.37  1.83   14.42\nSCORING_VERSION                             3 3985    1.97  0.16    2.00\nTOTALSCORE                                  4 3985   17.74  6.88   18.00\nPRIORSCORE                                  5 3985    0.98  1.23    1.00\nFAMILYSCORE                                 6 3985    2.90  1.70    3.00\nEDUCATIONSCORE                              7 3985    2.76  1.77    3.00\nPEERSCORE                                   8 3985    2.65  1.36    2.00\nSUBSTANCESCORE                              9 3985    1.72  1.46    1.00\nLEISURESCORE                               10 3985    1.68  0.94    2.00\nPERSONALITYSCORE                           11 3985    3.24  1.89    3.00\nATTITUDESSCORE                             12 3985    1.79  1.41    2.00\nTotal weeks of service                     13 3985   21.39 13.78   20.00\nFiscal Year Ends \\r\\n(i.e. June 30 Year)   14 3985 2021.77  0.87 2022.00\n                                         trimmed   mad     min     max  range\nAGE_AT_SERVICE_START                       16.76  1.37   11.85   20.91   9.05\nAGE_AT_FIRST_REFERRAL_DATE                 14.40  1.83    0.43   20.07  19.64\nSCORING_VERSION                             2.00  0.00    1.00    2.00   1.00\nTOTALSCORE                                 17.90  7.41    0.00   38.00  38.00\nPRIORSCORE                                  0.77  1.48    0.00    5.00   5.00\nFAMILYSCORE                                 2.89  1.48    0.00    6.00   6.00\nEDUCATIONSCORE                              2.73  1.48    0.00    7.00   7.00\nPEERSCORE                                   2.81  2.97    0.00    4.00   4.00\nSUBSTANCESCORE                              1.63  1.48    0.00    5.00   5.00\nLEISURESCORE                                1.73  1.48    0.00    3.00   3.00\nPERSONALITYSCORE                            3.27  2.97    0.00    7.00   7.00\nATTITUDESSCORE                              1.71  1.48    0.00    5.00   5.00\nTotal weeks of service                     20.14 12.71    0.00  100.00 100.00\nFiscal Year Ends \\r\\n(i.e. June 30 Year) 2021.65  1.48 2021.00 2024.00   3.00\n                                          skew kurtosis   se\nAGE_AT_SERVICE_START                     -0.32     0.21 0.02\nAGE_AT_FIRST_REFERRAL_DATE               -0.42     1.90 0.03\nSCORING_VERSION                          -5.88    32.60 0.00\nTOTALSCORE                               -0.18    -0.37 0.11\nPRIORSCORE                                1.24     0.77 0.02\nFAMILYSCORE                               0.08    -0.87 0.03\nEDUCATIONSCORE                            0.12    -0.83 0.03\nPEERSCORE                                -0.52    -0.87 0.02\nSUBSTANCESCORE                            0.33    -1.15 0.02\nLEISURESCORE                             -0.46    -0.65 0.01\nPERSONALITYSCORE                         -0.08    -0.92 0.03\nATTITUDESSCORE                            0.34    -0.91 0.02\nTotal weeks of service                    1.18     2.71 0.22\nFiscal Year Ends \\r\\n(i.e. June 30 Year)  0.92    -0.03 0.01\n\n\n\n# Create histograms for each numeric column\nlapply(names(filtered_data[sapply(filtered_data, is.numeric)]), function(var) {\n  ggplot(filtered_data, aes(x = .data[[var]])) +\n    geom_histogram(bins = 30, fill = \"blue\", color = \"black\") +\n    ggtitle(paste(\"Histogram of\", var)) +\n    theme_minimal()  # Adding theme_minimal for better aesthetics\n})\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n\n\n\n\n[[5]]\n\n\n\n\n\n\n\n\n\n\n[[6]]\n\n\n\n\n\n\n\n\n\n\n[[7]]\n\n\n\n\n\n\n\n\n\n\n[[8]]\n\n\n\n\n\n\n\n\n\n\n[[9]]\n\n\n\n\n\n\n\n\n\n\n[[10]]\n\n\n\n\n\n\n\n\n\n\n[[11]]\n\n\n\n\n\n\n\n\n\n\n[[12]]\n\n\n\n\n\n\n\n\n\n\n[[13]]\n\n\n\n\n\n\n\n\n\n\n[[14]]\n\n\n\n\n\n\n\n\n\n\nprint(descriptive_stats)\n\n                                         vars    n    mean    sd  median\nAGE_AT_SERVICE_START                        1 3985   16.71  1.52   16.87\nAGE_AT_FIRST_REFERRAL_DATE                  2 3985   14.37  1.83   14.42\nSCORING_VERSION                             3 3985    1.97  0.16    2.00\nTOTALSCORE                                  4 3985   17.74  6.88   18.00\nPRIORSCORE                                  5 3985    0.98  1.23    1.00\nFAMILYSCORE                                 6 3985    2.90  1.70    3.00\nEDUCATIONSCORE                              7 3985    2.76  1.77    3.00\nPEERSCORE                                   8 3985    2.65  1.36    2.00\nSUBSTANCESCORE                              9 3985    1.72  1.46    1.00\nLEISURESCORE                               10 3985    1.68  0.94    2.00\nPERSONALITYSCORE                           11 3985    3.24  1.89    3.00\nATTITUDESSCORE                             12 3985    1.79  1.41    2.00\nTotal weeks of service                     13 3985   21.39 13.78   20.00\nFiscal Year Ends \\r\\n(i.e. June 30 Year)   14 3985 2021.77  0.87 2022.00\n                                         trimmed   mad     min     max  range\nAGE_AT_SERVICE_START                       16.76  1.37   11.85   20.91   9.05\nAGE_AT_FIRST_REFERRAL_DATE                 14.40  1.83    0.43   20.07  19.64\nSCORING_VERSION                             2.00  0.00    1.00    2.00   1.00\nTOTALSCORE                                 17.90  7.41    0.00   38.00  38.00\nPRIORSCORE                                  0.77  1.48    0.00    5.00   5.00\nFAMILYSCORE                                 2.89  1.48    0.00    6.00   6.00\nEDUCATIONSCORE                              2.73  1.48    0.00    7.00   7.00\nPEERSCORE                                   2.81  2.97    0.00    4.00   4.00\nSUBSTANCESCORE                              1.63  1.48    0.00    5.00   5.00\nLEISURESCORE                                1.73  1.48    0.00    3.00   3.00\nPERSONALITYSCORE                            3.27  2.97    0.00    7.00   7.00\nATTITUDESSCORE                              1.71  1.48    0.00    5.00   5.00\nTotal weeks of service                     20.14 12.71    0.00  100.00 100.00\nFiscal Year Ends \\r\\n(i.e. June 30 Year) 2021.65  1.48 2021.00 2024.00   3.00\n                                          skew kurtosis   se\nAGE_AT_SERVICE_START                     -0.32     0.21 0.02\nAGE_AT_FIRST_REFERRAL_DATE               -0.42     1.90 0.03\nSCORING_VERSION                          -5.88    32.60 0.00\nTOTALSCORE                               -0.18    -0.37 0.11\nPRIORSCORE                                1.24     0.77 0.02\nFAMILYSCORE                               0.08    -0.87 0.03\nEDUCATIONSCORE                            0.12    -0.83 0.03\nPEERSCORE                                -0.52    -0.87 0.02\nSUBSTANCESCORE                            0.33    -1.15 0.02\nLEISURESCORE                             -0.46    -0.65 0.01\nPERSONALITYSCORE                         -0.08    -0.92 0.03\nATTITUDESSCORE                            0.34    -0.91 0.02\nTotal weeks of service                    1.18     2.71 0.22\nFiscal Year Ends \\r\\n(i.e. June 30 Year)  0.92    -0.03 0.01\n\n\n\n# Ensure all character columns are converted to factors\nfiltered_data &lt;- filtered_data %&gt;%\n  mutate(across(where(is.character), as.factor))\n\n# Create a summary table for counts and levels\ncount_levels_summary &lt;- filtered_data %&gt;%\n  select(where(is.factor)) %&gt;%  # Select only factor variables\n  summarise(across(everything(), \n                   list(Count = ~sum(!is.na(.)),\n                        Levels = ~nlevels(.)), \n                   .names = \"{.col}_{.fn}\")) %&gt;%\n  pivot_longer(cols = everything(), \n               names_to = c(\"Variable\", \".value\"), \n               names_pattern = \"(.*)_(.*)\")\n\n# Print the counts and levels summary table\nprint(count_levels_summary)\n\n# A tibble: 141 × 3\n   Variable            Count Levels\n   &lt;chr&gt;               &lt;int&gt;  &lt;int&gt;\n 1 UNIQUE_ID            3985   1708\n 2 YOUTH_NUM_IN_COHORT  3985   3985\n 3 GENDER               3985      2\n 4 RACE                 3985      5\n 5 ETHNICITY            3985      3\n 6 RACNICITY            3985      5\n 7 ASSESSMENT_TYPE      3985      3\n 8 ASSESSMENT_PO        3984    624\n 9 Total_Risk_Desc      3985      4\n10 Prior_Risk_Desc      3985      3\n# ℹ 131 more rows\n\n\n\n# Create a summary table for frequencies for categories with fewer than 100 levels\nfrequency_summary &lt;- filtered_data %&gt;%\n  select(where(is.factor)) %&gt;%\n  summarise(across(everything(),\n                   ~if(nlevels(.) &lt; 100) list(table(.)) else NA, \n                   .names = \"{.col}_Frequency\")) %&gt;%\n  pivot_longer(cols = ends_with(\"_Frequency\"),\n               names_to = \"Variable\",\n               values_to = \"Frequency\",\n               values_drop_na = TRUE)\n\n# Format the frequency data for better readability\nfrequency_summary$Frequency &lt;- sapply(frequency_summary$Frequency, toString)\n\n# Print the frequency summary table for factors with less than 100 levels\nprint(frequency_summary)\n\n# A tibble: 134 × 2\n   Variable                      Frequency               \n   &lt;chr&gt;                         &lt;chr&gt;                   \n 1 GENDER_Frequency              619, 3366               \n 2 RACE_Frequency                7, 1871, 204, 4, 1899   \n 3 ETHNICITY_Frequency           614, 3354, 17           \n 4 RACNICITY_Frequency           1784, 614, 143, 17, 1427\n 5 ASSESSMENT_TYPE_Frequency     94, 1750, 2141          \n 6 Total_Risk_Desc_Frequency     1265, 491, 2165, 64     \n 7 Prior_Risk_Desc_Frequency     561, 1907, 1517         \n 8 Family_Risk_Desc_Frequency    785, 1719, 1481         \n 9 Education_Risk_Desc_Frequency 1416, 527, 2042         \n10 Peer_Risk_Desc_Frequency      1729, 635, 1621         \n# ℹ 124 more rows\n\n\n\n# Ensure all character columns are converted to factors\nfiltered_data &lt;- filtered_data %&gt;%\n  mutate(across(where(is.character), as.factor))\n\n# Create a summary table for counts and levels\ncount_levels_summary &lt;- filtered_data %&gt;%\n  select(where(is.factor)) %&gt;%  # Select only factor variables\n  summarise(across(everything(), \n                   list(Count = ~sum(!is.na(.)),\n                        Levels = ~nlevels(.)), \n                   .names = \"{.col}_{.fn}\")) %&gt;%\n  pivot_longer(cols = everything(), \n               names_to = c(\"Variable\", \".value\"), \n               names_pattern = \"(.*)_(.*)\")\n\n# Print the counts and levels summary table\nprint(count_levels_summary)\n\n# A tibble: 141 × 3\n   Variable            Count Levels\n   &lt;chr&gt;               &lt;int&gt;  &lt;int&gt;\n 1 UNIQUE_ID            3985   1708\n 2 YOUTH_NUM_IN_COHORT  3985   3985\n 3 GENDER               3985      2\n 4 RACE                 3985      5\n 5 ETHNICITY            3985      3\n 6 RACNICITY            3985      5\n 7 ASSESSMENT_TYPE      3985      3\n 8 ASSESSMENT_PO        3984    624\n 9 Total_Risk_Desc      3985      4\n10 Prior_Risk_Desc      3985      3\n# ℹ 131 more rows\n\n\n\n# Create a summary table for frequencies for categories with fewer than 100 levels\nfrequency_summary &lt;- filtered_data %&gt;%\n  select(where(is.factor)) %&gt;%\n  summarise(across(everything(),\n                   ~if(nlevels(.) &lt; 100) list(enframe(table(.))) else NA, \n                   .names = \"{.col}_Frequency\")) %&gt;%\n  pivot_longer(cols = ends_with(\"_Frequency\"),\n               names_to = \"Variable\",\n               values_to = \"Frequency\",\n               values_drop_na = TRUE)\n\n# Explode the list column into separate rows for each category\nfrequency_summary &lt;- frequency_summary %&gt;%\n  unnest(Frequency)\n\n# Rename columns for clarity\ncolnames(frequency_summary)[3:4] &lt;- c(\"Category\", \"Count\")\n\n# Print the frequency summary table for factors with less than 100 levels\nprint(frequency_summary)\n\n# A tibble: 1,206 × 3\n   Variable            name                                Category   \n   &lt;chr&gt;               &lt;chr&gt;                               &lt;table[1d]&gt;\n 1 GENDER_Frequency    Female                               619       \n 2 GENDER_Frequency    Male                                3366       \n 3 RACE_Frequency      Asian                                  7       \n 4 RACE_Frequency      Black                               1871       \n 5 RACE_Frequency      Multiracial                          204       \n 6 RACE_Frequency      Native Hawaiian or Pacific Islander    4       \n 7 RACE_Frequency      White                               1899       \n 8 ETHNICITY_Frequency Hispanic                             614       \n 9 ETHNICITY_Frequency Non-Hispanic                        3354       \n10 ETHNICITY_Frequency Unknown                               17       \n# ℹ 1,196 more rows\n\n\n\n# Generate bar plots for each categorical column\nresults &lt;- lapply(names(filtered_data[sapply(filtered_data, is.factor)]), function(var) {\n  ggplot(filtered_data, aes(x = .data[[var]], fill = .data[[var]])) +\n    geom_bar() +\n    labs(title = paste(\"Frequency of\", var), x = var, fill = var) +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate x-axis labels for readability\n})\n\n\n# Create bar plots for each factor column\n# lapply(names(filtered_data[sapply(filtered_data, is.factor)]), function(var) {\n#   ggplot(filtered_data, aes_string(x = var, fill = var)) +\n#     geom_bar() +\n#     ggtitle(paste(\"Frequency of\", var)) +\n#     theme_minimal()\n# })\n\n# Export numeric descriptives to CSV\n#write.csv(descriptive_stats, \"/Users/shawes/PA_JCMS/data/Descriptive_Statistics_Numeric.csv\")\n\n# For categorical data, it may be necessary to convert list outputs to data frames first, not shown here."
  }
]