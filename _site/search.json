[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SPEP Revalidation",
    "section": "",
    "text": "Config OptionsInstall PackagesLoad DataPrep data\n\n\n\n\nThis code configures knitr code chunk options\n\n\n\nCode\nknitr::opts_chunk$set(\n    echo = T, message = F, warning = F, error = F,\n    comment = NA, cache = T, code_folding = T,\n    R.options = list(width = 220, digits = 3),\n    fig.align = \"center\",\n    out.width = \"75%\", fig.asp = .75\n)\n\n\n\n\n\n\n\nThis code loads the r packages necessary for this example\n\n\n\nCode\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(gtsummary)\nlibrary(DT)\nlibrary(patchwork)\nlibrary(dlookr)\n\n\n\n\n\n\nThis code loads the dataframe\n\n\n\nCode\n# Read the data from an Excel file\nmerged &lt;- read_excel(\"/Users/shawes/PA_JCMS/data/Merged_Files_NoRecid.xlsx\")\n\n\n\n\n\n\nThis code prepares the dataset for analysis\n\n\n\nCode\n## % Missingness by Variable\n\n# Calculate the percentage of missing data for each column\nmissing_data_percentages &lt;- merged %&gt;%\n  summarise(across(everything(), ~ mean(is.na(.)) * 100)) %&gt;%\n  pivot_longer(cols = everything(), names_to = \"variable\", values_to = \"missing_percentage\")\n\n# Filter out columns with &gt;= 90% missing data\ncolumns_to_keep &lt;- missing_data_percentages %&gt;%\n  filter(missing_percentage &lt; 90) %&gt;%\n  pull(variable)\n\n# Select the columns to keep\nmerged &lt;- merged %&gt;%\n  select(all_of(columns_to_keep))\n\n\n\n\nCode\n## Prep data\n\n# List of sensitive variables to exclude\nsensitive_vars &lt;- c(\"unique_id\", \"youth_num_in_cohort\", \"mhs2_juvenile_id\", \"dob\", \"assessment_po\")\n\n# Function to clean variable names\nclean_variable_names &lt;- function(merged) {\n  cleaned_names &lt;- merged %&gt;%\n    names() %&gt;%\n    str_replace_all(\"[^[:alnum:]_]\", \"_\") %&gt;%\n    str_replace_all(\"__+\", \"_\") %&gt;%\n    str_trim() %&gt;%\n    tolower()\n  \n  # Ensure unique names\n  cleaned_names &lt;- make.unique(cleaned_names)\n  \n  names(merged) &lt;- cleaned_names\n  return(merged)\n}\n\n# Function to calculate means and standard deviations for numeric columns\ncalculate_means_sds &lt;- function(merged) {\n  means_sds &lt;- sapply(merged, function(x) if(is.numeric(x)) {\n    mean_value &lt;- round(mean(x, na.rm = TRUE), 2)\n    sd_value &lt;- round(sd(x, na.rm = TRUE), 2)\n    paste0(mean_value, \" (\", sd_value, \")\")\n  } else NA)\n  return(means_sds)\n}\n\n# Function to set variable types based on dlookr diagnostics\nset_variable_types &lt;- function(merged, types) {\n  for (i in 1:nrow(types)) {\n    var &lt;- types$variables[i]\n    type &lt;- types$types[i]\n    if (type == \"numeric\") {\n      merged[[var]] &lt;- as.numeric(merged[[var]])\n    } else if (type == \"factor\") {\n      merged[[var]] &lt;- as.factor(merged[[var]])\n    } else if (type == \"integer\") {\n      merged[[var]] &lt;- as.integer(merged[[var]])\n    } else if (type == \"character\") {\n      merged[[var]] &lt;- as.character(merged[[var]])\n    }\n    # Add other types as necessary\n  }\n  return(merged)\n}\n\n# Function to convert character variables to factors if they have a limited number of unique values\nconvert_char_to_factor &lt;- function(merged) {\n  merged &lt;- merged %&gt;%\n    mutate(across(where(is.character), as.factor))\n  return(merged)\n}\n\n# Function to calculate the mode for factor variables\ncalculate_modes &lt;- function(merged) {\n  modes &lt;- sapply(merged, function(x) if(is.factor(x)) {\n    mode_value &lt;- names(sort(table(x), decreasing = TRUE)[1])\n    mode_count &lt;- max(table(x))\n    mode_percentage &lt;- (mode_count / length(x)) * 100\n    paste0(mode_value, \" (\", round(mode_percentage, 2), \"%)\")\n  } else NA)\n  return(modes)\n}\n\n# Function to calculate date statistics for POSIXct columns\ncalculate_date_statistics &lt;- function(merged) {\n  date_stats &lt;- sapply(merged, function(x) if(inherits(x, \"POSIXct\")) {\n    min_date &lt;- format(min(x, na.rm = TRUE), \"%Y-%m-%d\")\n    max_date &lt;- format(max(x, na.rm = TRUE), \"%Y-%m-%d\")\n    num_unique_dates &lt;- length(unique(x))\n    median_date &lt;- format(median(x, na.rm = TRUE), \"%Y-%m-%d\")\n    paste0(min_date, \" to \", max_date)\n  } else NA)\n  return(date_stats)\n}\n\n# Function to count the number of levels for factor variables\ncount_levels &lt;- function(merged) {\n  num_levels &lt;- sapply(merged, function(x) if(is.factor(x)) length(levels(x)) else NA)\n  return(num_levels)\n}\n\n# Function to mask sensitive data, only for existing columns\nmask_sensitive_data &lt;- function(merged, sensitive_vars) {\n  existing_sensitive_vars &lt;- intersect(names(merged), sensitive_vars)\n  if(length(existing_sensitive_vars) &gt; 0) {\n    merged &lt;- merged %&gt;%\n      mutate(across(all_of(existing_sensitive_vars), ~ \"Masked\"))\n  }\n  return(merged)\n}\n\n# List of sensitive variables to exclude\nsensitive_vars &lt;- c(\"youth_num_in_cohort\", \"mhs2_juvenile_id\", \"dob\", \"assessment_po\")\n# \"unique_id\" \n\n# Apply the cleaning function to the dataset\nmerged_clean &lt;- clean_variable_names(merged)\n\n# Convert character variables to factors\nmerged_clean &lt;- convert_char_to_factor(merged_clean)\n\n# Determine variable types using dlookr\nvariable_types &lt;- diagnose(merged_clean) %&gt;%\n  select(variables, types)\n\n# Set variable types based on dlookr diagnostics\nmerged_clean &lt;- set_variable_types(merged_clean, variable_types)\n\n# Mask sensitive data\nmerged_clean &lt;- mask_sensitive_data(merged_clean, sensitive_vars)\n\n# Create a mapping table of original and cleaned names, excluding sensitive variables\nmapping_table &lt;- tibble(\n  original_name = names(merged),\n  cleaned_name = names(merged_clean)\n) %&gt;%\n  filter(!cleaned_name %in% sensitive_vars)\n\n# Calculate means and standard deviations for numeric columns\nmeans_sds &lt;- calculate_means_sds(merged_clean)\n\n# Calculate modes for factor columns\nmodes &lt;- calculate_modes(merged_clean)\n\n# Calculate date statistics for POSIXct columns\ndate_statistics &lt;- calculate_date_statistics(merged_clean)\n\n# Count the number of levels for factor variables\nnum_levels &lt;- count_levels(merged_clean)\n\n# Combine means, modes, date statistics, and sensitive summaries into separate columns\nmapping_table &lt;- mapping_table %&gt;%\n  mutate(mean_sd = means_sds[!names(means_sds) %in% sensitive_vars],\n         mode = modes[!names(modes) %in% sensitive_vars],\n         date_range = date_statistics[!names(date_statistics) %in% sensitive_vars],\n         num_levels = num_levels[!names(num_levels) %in% sensitive_vars]) %&gt;%\n  left_join(variable_types, by = c(\"cleaned_name\" = \"variables\"))\n\n# Ensure all numeric values in the table are rounded to two decimal places\nmapping_table &lt;- mapping_table %&gt;%\n  mutate(across(where(is.numeric), ~ round(., 2)))\n\n# Reorder the columns so that summary_statistic is before original_name\nmapping_table &lt;- mapping_table %&gt;%\n  select(cleaned_name, mean_sd, mode, date_range, num_levels, original_name, types)"
  },
  {
    "objectID": "index.html#preliminary-setup",
    "href": "index.html#preliminary-setup",
    "title": "SPEP Revalidation",
    "section": "",
    "text": "Config OptionsInstall PackagesLoad DataPrep data\n\n\n\n\nThis code configures knitr code chunk options\n\n\n\nCode\nknitr::opts_chunk$set(\n    echo = T, message = F, warning = F, error = F,\n    comment = NA, cache = T, code_folding = T,\n    R.options = list(width = 220, digits = 3),\n    fig.align = \"center\",\n    out.width = \"75%\", fig.asp = .75\n)\n\n\n\n\n\n\n\nThis code loads the r packages necessary for this example\n\n\n\nCode\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(gtsummary)\nlibrary(DT)\nlibrary(patchwork)\nlibrary(dlookr)\n\n\n\n\n\n\nThis code loads the dataframe\n\n\n\nCode\n# Read the data from an Excel file\nmerged &lt;- read_excel(\"/Users/shawes/PA_JCMS/data/Merged_Files_NoRecid.xlsx\")\n\n\n\n\n\n\nThis code prepares the dataset for analysis\n\n\n\nCode\n## % Missingness by Variable\n\n# Calculate the percentage of missing data for each column\nmissing_data_percentages &lt;- merged %&gt;%\n  summarise(across(everything(), ~ mean(is.na(.)) * 100)) %&gt;%\n  pivot_longer(cols = everything(), names_to = \"variable\", values_to = \"missing_percentage\")\n\n# Filter out columns with &gt;= 90% missing data\ncolumns_to_keep &lt;- missing_data_percentages %&gt;%\n  filter(missing_percentage &lt; 90) %&gt;%\n  pull(variable)\n\n# Select the columns to keep\nmerged &lt;- merged %&gt;%\n  select(all_of(columns_to_keep))\n\n\n\n\nCode\n## Prep data\n\n# List of sensitive variables to exclude\nsensitive_vars &lt;- c(\"unique_id\", \"youth_num_in_cohort\", \"mhs2_juvenile_id\", \"dob\", \"assessment_po\")\n\n# Function to clean variable names\nclean_variable_names &lt;- function(merged) {\n  cleaned_names &lt;- merged %&gt;%\n    names() %&gt;%\n    str_replace_all(\"[^[:alnum:]_]\", \"_\") %&gt;%\n    str_replace_all(\"__+\", \"_\") %&gt;%\n    str_trim() %&gt;%\n    tolower()\n  \n  # Ensure unique names\n  cleaned_names &lt;- make.unique(cleaned_names)\n  \n  names(merged) &lt;- cleaned_names\n  return(merged)\n}\n\n# Function to calculate means and standard deviations for numeric columns\ncalculate_means_sds &lt;- function(merged) {\n  means_sds &lt;- sapply(merged, function(x) if(is.numeric(x)) {\n    mean_value &lt;- round(mean(x, na.rm = TRUE), 2)\n    sd_value &lt;- round(sd(x, na.rm = TRUE), 2)\n    paste0(mean_value, \" (\", sd_value, \")\")\n  } else NA)\n  return(means_sds)\n}\n\n# Function to set variable types based on dlookr diagnostics\nset_variable_types &lt;- function(merged, types) {\n  for (i in 1:nrow(types)) {\n    var &lt;- types$variables[i]\n    type &lt;- types$types[i]\n    if (type == \"numeric\") {\n      merged[[var]] &lt;- as.numeric(merged[[var]])\n    } else if (type == \"factor\") {\n      merged[[var]] &lt;- as.factor(merged[[var]])\n    } else if (type == \"integer\") {\n      merged[[var]] &lt;- as.integer(merged[[var]])\n    } else if (type == \"character\") {\n      merged[[var]] &lt;- as.character(merged[[var]])\n    }\n    # Add other types as necessary\n  }\n  return(merged)\n}\n\n# Function to convert character variables to factors if they have a limited number of unique values\nconvert_char_to_factor &lt;- function(merged) {\n  merged &lt;- merged %&gt;%\n    mutate(across(where(is.character), as.factor))\n  return(merged)\n}\n\n# Function to calculate the mode for factor variables\ncalculate_modes &lt;- function(merged) {\n  modes &lt;- sapply(merged, function(x) if(is.factor(x)) {\n    mode_value &lt;- names(sort(table(x), decreasing = TRUE)[1])\n    mode_count &lt;- max(table(x))\n    mode_percentage &lt;- (mode_count / length(x)) * 100\n    paste0(mode_value, \" (\", round(mode_percentage, 2), \"%)\")\n  } else NA)\n  return(modes)\n}\n\n# Function to calculate date statistics for POSIXct columns\ncalculate_date_statistics &lt;- function(merged) {\n  date_stats &lt;- sapply(merged, function(x) if(inherits(x, \"POSIXct\")) {\n    min_date &lt;- format(min(x, na.rm = TRUE), \"%Y-%m-%d\")\n    max_date &lt;- format(max(x, na.rm = TRUE), \"%Y-%m-%d\")\n    num_unique_dates &lt;- length(unique(x))\n    median_date &lt;- format(median(x, na.rm = TRUE), \"%Y-%m-%d\")\n    paste0(min_date, \" to \", max_date)\n  } else NA)\n  return(date_stats)\n}\n\n# Function to count the number of levels for factor variables\ncount_levels &lt;- function(merged) {\n  num_levels &lt;- sapply(merged, function(x) if(is.factor(x)) length(levels(x)) else NA)\n  return(num_levels)\n}\n\n# Function to mask sensitive data, only for existing columns\nmask_sensitive_data &lt;- function(merged, sensitive_vars) {\n  existing_sensitive_vars &lt;- intersect(names(merged), sensitive_vars)\n  if(length(existing_sensitive_vars) &gt; 0) {\n    merged &lt;- merged %&gt;%\n      mutate(across(all_of(existing_sensitive_vars), ~ \"Masked\"))\n  }\n  return(merged)\n}\n\n# List of sensitive variables to exclude\nsensitive_vars &lt;- c(\"youth_num_in_cohort\", \"mhs2_juvenile_id\", \"dob\", \"assessment_po\")\n# \"unique_id\" \n\n# Apply the cleaning function to the dataset\nmerged_clean &lt;- clean_variable_names(merged)\n\n# Convert character variables to factors\nmerged_clean &lt;- convert_char_to_factor(merged_clean)\n\n# Determine variable types using dlookr\nvariable_types &lt;- diagnose(merged_clean) %&gt;%\n  select(variables, types)\n\n# Set variable types based on dlookr diagnostics\nmerged_clean &lt;- set_variable_types(merged_clean, variable_types)\n\n# Mask sensitive data\nmerged_clean &lt;- mask_sensitive_data(merged_clean, sensitive_vars)\n\n# Create a mapping table of original and cleaned names, excluding sensitive variables\nmapping_table &lt;- tibble(\n  original_name = names(merged),\n  cleaned_name = names(merged_clean)\n) %&gt;%\n  filter(!cleaned_name %in% sensitive_vars)\n\n# Calculate means and standard deviations for numeric columns\nmeans_sds &lt;- calculate_means_sds(merged_clean)\n\n# Calculate modes for factor columns\nmodes &lt;- calculate_modes(merged_clean)\n\n# Calculate date statistics for POSIXct columns\ndate_statistics &lt;- calculate_date_statistics(merged_clean)\n\n# Count the number of levels for factor variables\nnum_levels &lt;- count_levels(merged_clean)\n\n# Combine means, modes, date statistics, and sensitive summaries into separate columns\nmapping_table &lt;- mapping_table %&gt;%\n  mutate(mean_sd = means_sds[!names(means_sds) %in% sensitive_vars],\n         mode = modes[!names(modes) %in% sensitive_vars],\n         date_range = date_statistics[!names(date_statistics) %in% sensitive_vars],\n         num_levels = num_levels[!names(num_levels) %in% sensitive_vars]) %&gt;%\n  left_join(variable_types, by = c(\"cleaned_name\" = \"variables\"))\n\n# Ensure all numeric values in the table are rounded to two decimal places\nmapping_table &lt;- mapping_table %&gt;%\n  mutate(across(where(is.numeric), ~ round(., 2)))\n\n# Reorder the columns so that summary_statistic is before original_name\nmapping_table &lt;- mapping_table %&gt;%\n  select(cleaned_name, mean_sd, mode, date_range, num_levels, original_name, types)"
  },
  {
    "objectID": "index.html#descriptives-overview",
    "href": "index.html#descriptives-overview",
    "title": "SPEP Revalidation",
    "section": "Descriptives Overview",
    "text": "Descriptives Overview\n\nGeneral Data ViewDescriptivesService TypeRisk ScoresRisk Scores II\n\n\n\n\nThis table shows some general info for full sample (including duplicates), will probably be removed later\n\n\n\nCode\n# Render the table using DT::datatable with tooltips and better formatting\ndatatable(mapping_table, \n          rownames = FALSE,\n          caption = 'Summary Statistics Table',\n          extensions = 'Buttons',\n          options = list(\n            pageLength = 10,\n            scrollX = TRUE,\n            scrollY = \"500px\",\n            dom = 'Bfrtip',\n            buttons = c('copy', 'csv', 'excel', 'pdf', 'print')\n          )) %&gt;%\n  formatStyle(\n    columns = names(mapping_table),\n    valueColumns = \"types\",\n    backgroundColor = styleEqual(c(\"numeric\", \"factor\", \"POSIXct\"), c(\"lightblue\", \"lightgreen\", \"lightpink\"))\n  )\n\n\n\n\n\n\n\n\n\n\n\nThis code creates a basic descriptives table by setting (community vs residential)\n\n\n\nCode\n# Obtain the variable names from the merged dataframe\nvariables &lt;- names(merged_clean)\n\n# Filter variables that include the sequence \"yls\"\nfiltered_variables &lt;- grep(\"yls\", variables, value = TRUE)\n\n# Print the filtered variables\n#print(filtered_variables)\n\n# Create a test dataframe with the specified variables\ntest_df &lt;- merged_clean %&gt;%\n  select(\n    \"age_at_service_start\",\n    \"gender\",\n    \"race\",\n    \"ethnicity\",\n    \"racnicity\",\n    \"age_at_first_referral_date\",\n    #youth_num_in_cohort,\n    #number_of_youth_scoring_low_on_the_yls,\n    #number_of_youth_scoring_moderate_on_the_yls,\n    #number_of_youth_scoring_high_on_the_yls,\n    #number_of_youth_scoring_very_high_on_the_yls,\n    #points_received_risk_level_of_youth_youth_scoring_above_low_on_the_yls,\n    #points_received_risk_level_of_youth_youth_scoring_above_moderate_on_the_yls,\n    setting\n  )\n\n# Create a summary table for the full sample\nfull_sample_summary &lt;- tbl_summary(\n  test_df,\n  by = setting,\n  statistic = list(\n    all_continuous() ~ \"{mean} ({sd})\",\n    all_categorical() ~ \"{n} ({p}%)\"\n  ),\n  missing = \"no\"\n) %&gt;%\n  add_p() %&gt;%\n  bold_labels() %&gt;%\n  modify_header(label ~ \"**Variable**\") %&gt;%\n  modify_caption(\"**Descriptive Statistics by Setting**\") %&gt;%\n  modify_footnote(\n    all_stat_cols() ~ \"Mean (SD) for continuous variables, N (%) for categorical variables\"\n  )\n\n# Display the summary table\nfull_sample_summary\n\n\n\n\n\n\n\nDescriptive Statistics by Setting\n\n\nVariable\nC, N = 8021\nR, N = 3,1831\np-value2\n\n\n\n\nage_at_service_start\n16.27 (1.53)\n16.82 (1.50)\n&lt;0.001\n\n\ngender\n\n\n&lt;0.001\n\n\n    Female\n199 (25%)\n420 (13%)\n\n\n\n    Male\n603 (75%)\n2,763 (87%)\n\n\n\nrace\n\n\n&lt;0.001\n\n\n    Asian\n3 (0.4%)\n4 (0.1%)\n\n\n\n    Black\n249 (31%)\n1,622 (51%)\n\n\n\n    Multiracial\n35 (4.4%)\n169 (5.3%)\n\n\n\n    Native Hawaiian or Pacific Islander\n0 (0%)\n4 (0.1%)\n\n\n\n    White\n515 (64%)\n1,384 (43%)\n\n\n\nethnicity\n\n\n&lt;0.001\n\n\n    Hispanic\n207 (26%)\n407 (13%)\n\n\n\n    Non-Hispanic\n589 (73%)\n2,765 (87%)\n\n\n\n    Unknown\n6 (0.7%)\n11 (0.3%)\n\n\n\nracnicity\n\n\n\n\n\n    BLACK-NH\n217 (27%)\n1,567 (49%)\n\n\n\n    HISPANIC\n207 (26%)\n407 (13%)\n\n\n\n    OTHER\n24 (3.0%)\n119 (3.7%)\n\n\n\n    UNKNOWN\n6 (0.7%)\n11 (0.3%)\n\n\n\n    WHITE-NH\n348 (43%)\n1,079 (34%)\n\n\n\nage_at_first_referral_date\n14.93 (1.67)\n14.23 (1.84)\n&lt;0.001\n\n\n\n1 Mean (SD) for continuous variables, N (%) for categorical variables\n\n\n2 Wilcoxon rank sum test; Pearson’s Chi-squared test; Fisher’s exact test\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis code creates a basic descriptives table for Service Type (full sample)\n\n\n\nCode\n# Create a test dataframe with the specified variables\ntest_df &lt;- merged_clean %&gt;%\n  select(\n    service_type\n  )\n\n# Create a summary table for 'service_type'\nservice_type_summary &lt;- tbl_summary(\n  test_df,\n  statistic = list(\n    all_categorical() ~ \"{n} ({p}%)\"\n  ),\n  missing = \"no\"\n) %&gt;%\n  bold_labels() %&gt;%\n  modify_header(label ~ \"**Service Type**\") %&gt;%\n  modify_caption(\"**Distribution of Service Type**\") %&gt;%\n  modify_footnote(\n    all_stat_cols() ~ \"N (%) for categorical variables\"\n  )\n\n# Display the summary table\nservice_type_summary\n\n\n\n\n\n\n\nDistribution of Service Type\n\n\nService Type\nN = 3,9851\n\n\n\n\nservice_type\n\n\n\n    AGGRESSION REPLACEMENT TRAINING (ART) COMMUNITY BASED\n76 (2.0%)\n\n\n    AGGRESSION REPLACEMENT TRAINING (ART) RESIDENTIAL PROGRAM\n235 (6.1%)\n\n\n    BEHAVIOR MANAGEMENT\n208 (5.4%)\n\n\n    CHALLENGE PROGRAMS\n52 (1.3%)\n\n\n    COGNITIVE BEHAVIORAL THERAPY\n612 (16%)\n\n\n    FAMILY COUNSELING\n37 (1.0%)\n\n\n    GROUP COUNSELING\n742 (19%)\n\n\n    INDIVIDUAL COUNSELING\n533 (14%)\n\n\n    JOB RELATED TRAINING JOB TRAINING\n163 (4.2%)\n\n\n    JOB RELATED TRAINING VOCATIONAL COUNSELING\n186 (4.8%)\n\n\n    JOB RELATED TRAINING: JOB TRAINING\n19 (0.5%)\n\n\n    MENTORING\n193 (5.0%)\n\n\n    MIXED COUNSELING\n55 (1.4%)\n\n\n    MULTISYSTEMIC THERAPY (MST)\n64 (1.7%)\n\n\n    REMEDIAL ACADEMIC PROGRAM\n296 (7.6%)\n\n\n    RESTITUTION/COMMUNITY SERVICE\n115 (3.0%)\n\n\n    SOCIAL SKILLS TRAINING\n285 (7.4%)\n\n\n\n1 N (%) for categorical variables\n\n\n\n\n\n\n\n\n\n\nThis code creates a basic descriptives table for Service Type (no duplicates)\n\n\n\nCode\n# Convert SERVICE_START_DATE to Date type if it's not already\nmerged$SERVICE_START_DATE &lt;- as.Date(merged$SERVICE_START_DATE, format = \"%Y-%m-%d\")\n\n# Filter to keep the row with the earliest SERVICE_START_DATE for each UNIQUE_ID\nfiltered_df &lt;- merged %&gt;%\n  group_by(UNIQUE_ID) %&gt;%\n  filter(SERVICE_START_DATE == min(SERVICE_START_DATE, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n# Create a test dataframe with the specified variable\ntest_df &lt;- filtered_df %&gt;%\n  select(Service_Type)\n\n# Create a summary table for 'service_type'\nservice_type_summary &lt;- tbl_summary(\n  test_df,\n  statistic = list(\n    all_categorical() ~ \"{n} ({p}%)\"\n  ),\n  missing = \"no\"\n) %&gt;%\n  bold_labels() %&gt;%\n  modify_header(label ~ \"**Service Type**\") %&gt;%\n  modify_caption(\"**Distribution of Service Type**\") %&gt;%\n  modify_footnote(\n    all_stat_cols() ~ \"N (%) for categorical variables\"\n  )\n\n# Display the summary table\nservice_type_summary\n\n\n\n\n\n\n\nDistribution of Service Type\n\n\nService Type\nN = 2,6601\n\n\n\n\nService_Type\n\n\n\n    AGGRESSION REPLACEMENT TRAINING (ART) COMMUNITY BASED\n46 (1.8%)\n\n\n    AGGRESSION REPLACEMENT TRAINING (ART) RESIDENTIAL PROGRAM\n34 (1.3%)\n\n\n    BEHAVIOR MANAGEMENT\n168 (6.6%)\n\n\n    CHALLENGE PROGRAMS\n3 (0.1%)\n\n\n    COGNITIVE BEHAVIORAL THERAPY\n312 (12%)\n\n\n    FAMILY COUNSELING\n33 (1.3%)\n\n\n    GROUP COUNSELING\n548 (21%)\n\n\n    INDIVIDUAL COUNSELING\n427 (17%)\n\n\n    JOB RELATED TRAINING JOB TRAINING\n146 (5.7%)\n\n\n    JOB RELATED TRAINING VOCATIONAL COUNSELING\n95 (3.7%)\n\n\n    JOB RELATED TRAINING: JOB TRAINING\n17 (0.7%)\n\n\n    MENTORING\n184 (7.2%)\n\n\n    MIXED COUNSELING\n34 (1.3%)\n\n\n    MULTISYSTEMIC THERAPY (MST)\n62 (2.4%)\n\n\n    REMEDIAL ACADEMIC PROGRAM\n181 (7.1%)\n\n\n    RESTITUTION/COMMUNITY SERVICE\n79 (3.1%)\n\n\n    SOCIAL SKILLS TRAINING\n185 (7.2%)\n\n\n\n1 N (%) for categorical variables\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis table shows xxxxxx (full-sample)\n\n\n\nCode\n# # Convert SERVICE_START_DATE to Date type if it's not already\n# merged$SERVICE_START_DATE &lt;- as.Date(merged$SERVICE_START_DATE, format = \"%Y-%m-%d\")\n# \n# # Filter to keep the row with the earliest SERVICE_START_DATE for each UNIQUE_ID\n# filtered_df &lt;- merged %&gt;%\n#   group_by(UNIQUE_ID) %&gt;%\n#   filter(SERVICE_START_DATE == min(SERVICE_START_DATE, na.rm = TRUE)) %&gt;%\n#   ungroup()\n\n# Convert Total_Risk_Desc to a factor\nmerged$Total_Risk_Desc &lt;- as.factor(merged$Total_Risk_Desc)\n\n# Create a test dataframe with the specified variables\ntest_df &lt;- merged %&gt;%\n  select(Total_Risk_Desc, TOTALSCORE)\n\n# Create summary table for 'Total_Risk_Desc'\ntotal_risk_desc_summary &lt;- tbl_summary(\n  test_df %&gt;% select(Total_Risk_Desc),\n  statistic = list(\n    all_categorical() ~ \"{n} ({p}%)\"\n  ),\n  missing = \"no\"\n) %&gt;%\n  bold_labels() %&gt;%\n  modify_header(label ~ \"**Total Risk Description**\") %&gt;%\n  modify_caption(\"**Distribution of Total Risk Description**\") %&gt;%\n  modify_footnote(\n    all_stat_cols() ~ \"N (%) for categorical variables\"\n  )\n\n# Create summary table for 'TOTALSCORE'\ntotalscore_summary &lt;- tbl_summary(\n  test_df %&gt;% select(TOTALSCORE),\n  statistic = list(\n    all_continuous() ~ \"{mean} ({sd})\"\n  ),\n  missing = \"no\"\n) %&gt;%\n  bold_labels() %&gt;%\n  modify_header(label ~ \"**Total Score**\") %&gt;%\n  modify_caption(\"**Descriptive Statistics for Total Score**\") %&gt;%\n  modify_footnote(\n    all_stat_cols() ~ \"Mean (SD) for continuous variables\"\n  )\n\n# Convert summary tables to gt tables\ntotal_risk_desc_gt &lt;- as_gt(total_risk_desc_summary)\ntotalscore_gt &lt;- as_gt(totalscore_summary)\n\n# Display the summary tables side by side using gt\n#library(gt)\n#gt::gtsave(total_risk_desc_gt, \"total_risk_desc_summary.html\")\n#gt::gtsave(totalscore_gt, \"totalscore_summary.html\")\n\ntotal_risk_desc_gt\n\n\n\n\n\n\n\nDistribution of Total Risk Description\n\n\nTotal Risk Description\nN = 3,9851\n\n\n\n\nTotal_Risk_Desc\n\n\n\n    High\n1,265 (32%)\n\n\n    Low\n491 (12%)\n\n\n    Moderate\n2,165 (54%)\n\n\n    Very High\n64 (1.6%)\n\n\n\n1 N (%) for categorical variables\n\n\n\n\n\n\n\n\n\nCode\ntotalscore_gt\n\n\n\n\n\n\n\nDescriptive Statistics for Total Score\n\n\nTotal Score\nN = 3,9851\n\n\n\n\nTOTALSCORE\n18 (7)\n\n\n\n1 Mean (SD) for continuous variables\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis code creates a basic descriptives table for Service Type (no duplicates)\n\n\n\nCode\n# Convert SERVICE_START_DATE to Date type if it's not already\nmerged$SERVICE_START_DATE &lt;- as.Date(merged$SERVICE_START_DATE, format = \"%Y-%m-%d\")\n\n# Filter to keep the row with the earliest SERVICE_START_DATE for each UNIQUE_ID\nfiltered_df &lt;- merged %&gt;%\n  group_by(UNIQUE_ID) %&gt;%\n  filter(SERVICE_START_DATE == min(SERVICE_START_DATE, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n# Convert Total_Risk_Desc to a factor\nfiltered_df$Total_Risk_Desc &lt;- as.factor(filtered_df$Total_Risk_Desc)\n\n# Create a test dataframe with the specified variables\ntest_df &lt;- filtered_df %&gt;%\n  select(Total_Risk_Desc, TOTALSCORE)\n\n# Create summary table for 'Total_Risk_Desc'\ntotal_risk_desc_summary &lt;- tbl_summary(\n  test_df %&gt;% select(Total_Risk_Desc),\n  statistic = list(\n    all_categorical() ~ \"{n} ({p}%)\"\n  ),\n  missing = \"no\"\n) %&gt;%\n  bold_labels() %&gt;%\n  modify_header(label ~ \"**Total Risk Description**\") %&gt;%\n  modify_caption(\"**Distribution of Total Risk Description**\") %&gt;%\n  modify_footnote(\n    all_stat_cols() ~ \"N (%) for categorical variables\"\n  )\n\n# Create summary table for 'TOTALSCORE'\ntotalscore_summary &lt;- tbl_summary(\n  test_df %&gt;% select(TOTALSCORE),\n  statistic = list(\n    all_continuous() ~ \"{mean} ({sd})\"\n  ),\n  missing = \"no\"\n) %&gt;%\n  bold_labels() %&gt;%\n  modify_header(label ~ \"**Total Score**\") %&gt;%\n  modify_caption(\"**Descriptive Statistics for Total Score**\") %&gt;%\n  modify_footnote(\n    all_stat_cols() ~ \"Mean (SD) for continuous variables\"\n  )\n\n# Convert summary tables to gt tables\ntotal_risk_desc_gt &lt;- as_gt(total_risk_desc_summary)\ntotalscore_gt &lt;- as_gt(totalscore_summary)\n\n# Display the summary tables side by side using gt\n#library(gt)\n#gt::gtsave(total_risk_desc_gt, \"total_risk_desc_summary.html\")\n#gt::gtsave(totalscore_gt, \"totalscore_summary.html\")\n\ntotal_risk_desc_gt\n\n\n\n\n\n\n\nDistribution of Total Risk Description\n\n\nTotal Risk Description\nN = 2,6601\n\n\n\n\nTotal_Risk_Desc\n\n\n\n    High\n775 (29%)\n\n\n    Low\n379 (14%)\n\n\n    Moderate\n1,469 (55%)\n\n\n    Very High\n37 (1.4%)\n\n\n\n1 N (%) for categorical variables\n\n\n\n\n\n\n\n\n\nCode\ntotalscore_gt\n\n\n\n\n\n\n\nDescriptive Statistics for Total Score\n\n\nTotal Score\nN = 2,6601\n\n\n\n\nTOTALSCORE\n17 (7)\n\n\n\n1 Mean (SD) for continuous variables"
  }
]