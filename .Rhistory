variable_types <- list(
f = c("unique_id", "youth_num_in_cohort", "gender", "race", "ethnicity", "service_type", "setting"),
n = c("age_at_service_start", "totalscore", "points_received_primary_service_type", "total_quality_measures_received")
)
# Step 6: Function to update variable types
update_variable_types <- function(df, variable_types) {
for (type in names(variable_types)) {
vars <- variable_types[[type]]
if (type == "n") {
df <- df %>%
mutate(across(all_of(vars), ~ as.numeric(as.character(.))))
} else if (type == "f") {
df <- df %>%
mutate(across(all_of(vars), ~ as.factor(.)))
}
return(df)
}
# Step 7: Update the variable types
merged_clean <- update_variable_types(merged_clean, variable_types)
library(tidyverse)
library(janitor)
library(readr)
# Step 1: Read the CSV file with all columns as characters
merged <- read_csv("/Users/shawes/PA_JCMS/data/Merged_Files_NoRecid.csv", col_types = cols(.default = "c"))
# Step 2: Clean the column names
clean_variable_names <- function(df) {
cleaned_names <- df %>%
names() %>%
str_replace_all("[^[:alnum:]_]", "_") %>%  # Replace non-alphanumeric characters with _
str_replace_all("__+", "_") %>%  # Replace multiple underscores with a single one
str_replace_all("\n", "") %>%  # Remove newline characters
str_trim() %>%  # Trim leading and trailing spaces
str_remove("_$") %>%  # Remove trailing underscores
tolower()  # Convert to lowercase
# Resolve duplicates by appending a unique suffix with underscore
cleaned_names <- make.unique(cleaned_names, sep = "_")
names(df) <- cleaned_names
return(df)
}
# Clean the column names
merged_clean <- clean_variable_names(merged)
# Debugging: Print cleaned column names to ensure they are correct
print(names(merged_clean))
# Step 3: List of original columns to keep
original_columns_to_keep <- c("UNIQUE_ID", "YOUTH_NUM_IN_COHORT", "GENDER", "RACE", "ETHNICITY",
"AGE_AT_SERVICE_START", "TOTALSCORE", "Service_Type", "Setting",
"Points Received:
#Primary Service Type")
#original_columns_to_keep <- c("UNIQUE_ID", "YOUTH_NUM_IN_COHORT", "GENDER", "RACE", "ETHNICITY",
#                              "AGE_AT_SERVICE_START", "TOTALSCORE", "Service_Type", "Setting",
#                              "Points Received:
#Primary Service Type")
# Map the original column names to the cleaned column names
lookup_table <- tibble(original = names(merged), cleaned = names(merged_clean))
cleaned_columns_to_keep <- lookup_table %>%
filter(original %in% original_columns_to_keep) %>%
pull(cleaned)
# Step 4: Subset the dataframe using the cleaned column names
merged_clean <- merged_clean %>%
select(all_of(cleaned_columns_to_keep))
# Step 5: List of variables with their types
variable_types <- list(
f = c("unique_id", "youth_num_in_cohort", "gender", "race", "ethnicity", "service_type", "setting"),
n = c("age_at_service_start", "totalscore", "points_received_primary_service_type")
)
# Step 6: Function to update variable types
update_variable_types <- function(df, variable_types) {
for (type in names(variable_types)) {
vars <- variable_types[[type]]
if (type == "n") {
df <- df %>%
mutate(across(all_of(vars), ~ as.numeric(as.character(.))))
} else if (type == "f") {
df <- df %>%
mutate(across(all_of(vars), ~ as.factor(.)))
}
return(df)
}
# Step 7: Update the variable types
merged_clean <- update_variable_types(merged_clean, variable_types)
merged_clean
View(merged_clean)
rm(list=ls())
library(tidyverse)
library(janitor)
library(readr)
# Step 1: Read the CSV file with all columns as characters
merged <- read_csv("/Users/shawes/PA_JCMS/data/Merged_Files_NoRecid.csv", col_types = cols(.default = "c"))
# Step 2: Clean the column names
clean_variable_names <- function(df) {
cleaned_names <- df %>%
names() %>%
str_replace_all("[^[:alnum:]_]", "_") %>%  # Replace non-alphanumeric characters with _
str_replace_all("__+", "_") %>%  # Replace multiple underscores with a single one
str_replace_all("\n", "") %>%  # Remove newline characters
str_trim() %>%  # Trim leading and trailing spaces
str_remove("_$") %>%  # Remove trailing underscores
tolower()  # Convert to lowercase
# Resolve duplicates by appending a unique suffix with underscore
cleaned_names <- make.unique(cleaned_names, sep = "_")
names(df) <- cleaned_names
return(df)
}
# Clean the column names
merged_clean <- clean_variable_names(merged)
# Debugging: Print cleaned column names to ensure they are correct
print(names(merged_clean))
# Step 3: List of original columns to keep
original_columns_to_keep <- c("UNIQUE_ID", "YOUTH_NUM_IN_COHORT", "GENDER", "RACE", "ETHNICITY",
"AGE_AT_SERVICE_START", "TOTALSCORE", "Service_Type", "Setting",
"Points Received:
#Primary Service Type")
#original_columns_to_keep <- c("UNIQUE_ID", "YOUTH_NUM_IN_COHORT", "GENDER", "RACE", "ETHNICITY",
#                              "AGE_AT_SERVICE_START", "TOTALSCORE", "Service_Type", "Setting",
#                              "Points Received:
#Primary Service Type")
# Map the original column names to the cleaned column names
lookup_table <- tibble(original = names(merged), cleaned = names(merged_clean))
cleaned_columns_to_keep <- lookup_table %>%
filter(original %in% original_columns_to_keep) %>%
pull(cleaned)
# Step 4: Subset the dataframe using the cleaned column names
merged_clean <- merged_clean %>%
select(all_of(cleaned_columns_to_keep))
# Step 5: List of variables with their types
variable_types <- list(
f = c("unique_id", "youth_num_in_cohort", "gender", "race", "ethnicity", "service_type", "setting"),
n = c("age_at_service_start", "totalscore", "points_received_primary_service_type")
)
# Step 6: Function to update variable types
update_variable_types <- function(df, variable_types) {
for (type in names(variable_types)) {
vars <- variable_types[[type]]
if (type == "n") {
df <- df %>%
mutate(across(all_of(vars), ~ as.numeric(as.character(.))))
} else if (type == "f") {
df <- df %>%
mutate(across(all_of(vars), ~ as.factor(.)))
}
return(df)
}
# Step 7: Update the variable types
merged_clean <- update_variable_types(merged_clean, variable_types)
View(merged_clean)
rm(list=ls())
library(tidyverse)
library(janitor)
library(readr)
# Step 1: Read the CSV file with all columns as characters
merged <- read_csv("/Users/shawes/PA_JCMS/data/Merged_Files_NoRecid.csv", col_types = cols(.default = "c"))
# Step 2: Clean the column names
clean_variable_names <- function(df) {
cleaned_names <- df %>%
names() %>%
str_replace_all("[^[:alnum:]_]", "_") %>%  # Replace non-alphanumeric characters with _
str_replace_all("__+", "_") %>%  # Replace multiple underscores with a single one
str_replace_all("\n", "") %>%  # Remove newline characters
str_trim() %>%  # Trim leading and trailing spaces
str_remove("_$") %>%  # Remove trailing underscores
tolower()  # Convert to lowercase
# Resolve duplicates by appending a unique suffix with underscore
cleaned_names <- make.unique(cleaned_names, sep = "_")
names(df) <- cleaned_names
return(df)
}
# Clean the column names
merged_clean <- clean_variable_names(merged)
# Debugging: Print cleaned column names to ensure they are correct
print(names(merged_clean))
# Step 3: List of original columns to keep
original_columns_to_keep <- c("UNIQUE_ID", "YOUTH_NUM_IN_COHORT", "GENDER", "RACE", "ETHNICITY",
"AGE_AT_SERVICE_START", "TOTALSCORE", "Service_Type", "Setting",
"Points Received:
#Primary Service Type")
#original_columns_to_keep <- c("UNIQUE_ID", "YOUTH_NUM_IN_COHORT", "GENDER", "RACE", "ETHNICITY",
#                              "AGE_AT_SERVICE_START", "TOTALSCORE", "Service_Type", "Setting",
#                              "Points Received:
#Primary Service Type")
# Map the original column names to the cleaned column names
lookup_table <- tibble(original = names(merged), cleaned = names(merged_clean))
cleaned_columns_to_keep <- lookup_table %>%
filter(original %in% original_columns_to_keep) %>%
pull(cleaned)
# Step 4: Subset the dataframe using the cleaned column names
merged_clean <- merged_clean %>%
select(all_of(cleaned_columns_to_keep))
# Step 5: List of variables with their types
variable_types <- list(
f = c("unique_id", "youth_num_in_cohort", "gender", "race", "ethnicity", "service_type", "setting"),
n = c("age_at_service_start", "totalscore", "points_received_primary_service_type")
)
# Step 6: Function to update variable types
update_variable_types <- function(df, variable_types) {
for (type in names(variable_types)) {
vars <- variable_types[[type]]
if (type == "n") {
df <- df %>%
mutate(across(all_of(vars), ~ as.numeric(as.character(.))))
} else if (type == "f") {
df <- df %>%
mutate(across(all_of(vars), ~ as.factor(.)))
}
return(df)
}
# Step 7: Update the variable types
merged_clean <- update_variable_types(merged_clean, variable_types)
View(merged)
View(merged_clean)
rm(list=ls())
library(tidyverse)
library(janitor)
library(readr)
# Step 1: Read the CSV file with all columns as characters
merged <- read_csv("/Users/shawes/PA_JCMS/data/Merged_Files_NoRecid.csv", col_types = cols(.default = "c"))
# Step 2: Clean the column names
clean_variable_names <- function(df) {
cleaned_names <- df %>%
names() %>%
str_replace_all("[^[:alnum:]_]", "_") %>%  # Replace non-alphanumeric characters with _
str_replace_all("__+", "_") %>%  # Replace multiple underscores with a single one
str_replace_all("\n", "") %>%  # Remove newline characters
str_trim() %>%  # Trim leading and trailing spaces
str_remove("_$") %>%  # Remove trailing underscores
tolower()  # Convert to lowercase
# Resolve duplicates by appending a unique suffix with underscore
cleaned_names <- make.unique(cleaned_names, sep = "_")
names(df) <- cleaned_names
return(df)
}
# Clean the column names
merged_clean <- clean_variable_names(merged)
# Debugging: Print cleaned column names to ensure they are correct
print(names(merged_clean))
# Step 3: List of original columns to keep
original_columns_to_keep <- c("UNIQUE_ID", "YOUTH_NUM_IN_COHORT", "GENDER", "RACE", "ETHNICITY", "AGE_AT_SERVICE_START", "TOTALSCORE", "Service_Type", "Setting", "Points Received:
Primary Service Type")
#original_columns_to_keep <- c("UNIQUE_ID", "YOUTH_NUM_IN_COHORT", "GENDER", "RACE", "ETHNICITY",
#                              "AGE_AT_SERVICE_START", "TOTALSCORE", "Service_Type", "Setting",
#                              "Points Received:
#Primary Service Type")
# Map the original column names to the cleaned column names
lookup_table <- tibble(original = names(merged), cleaned = names(merged_clean))
cleaned_columns_to_keep <- lookup_table %>%
filter(original %in% original_columns_to_keep) %>%
pull(cleaned)
# Step 4: Subset the dataframe using the cleaned column names
merged_clean <- merged_clean %>%
select(all_of(cleaned_columns_to_keep))
# Step 5: List of variables with their types
variable_types <- list(
f = c("unique_id", "youth_num_in_cohort", "gender", "race", "ethnicity", "service_type", "setting"),
n = c("age_at_service_start", "totalscore", "points_received_primary_service_type")
)
# Step 6: Function to update variable types
update_variable_types <- function(df, variable_types) {
for (type in names(variable_types)) {
vars <- variable_types[[type]]
if (type == "n") {
df <- df %>%
mutate(across(all_of(vars), ~ as.numeric(as.character(.))))
} else if (type == "f") {
df <- df %>%
mutate(across(all_of(vars), ~ as.factor(.)))
}
return(df)
}
# Step 7: Update the variable types
merged_clean <- update_variable_types(merged_clean, variable_types)
# Verify the changes
str(merged_clean)
View(merged_clean)
rm(list=ls())
library(tidyverse)
library(janitor)
library(readr)
# Step 1: Read the CSV file with all columns as characters
merged <- read_csv("/Users/shawes/PA_JCMS/data/Merged_Files_NoRecid.csv", col_types = cols(.default = "c"))
# Step 2: Clean the column names
clean_variable_names <- function(df) {
cleaned_names <- df %>%
names() %>%
str_replace_all("[^[:alnum:]_]", "_") %>%  # Replace non-alphanumeric characters with _
str_replace_all("__+", "_") %>%  # Replace multiple underscores with a single one
str_replace_all("\n", "") %>%  # Remove newline characters
str_trim() %>%  # Trim leading and trailing spaces
str_remove("_$") %>%  # Remove trailing underscores
tolower()  # Convert to lowercase
# Resolve duplicates by appending a unique suffix with underscore
cleaned_names <- make.unique(cleaned_names, sep = "_")
names(df) <- cleaned_names
return(df)
}
# Clean the column names
merged_clean <- clean_variable_names(merged)
# Debugging: Print cleaned column names to ensure they are correct
print(names(merged_clean))
# Step 3: List of original columns to keep
original_columns_to_keep <- c("UNIQUE_ID", "YOUTH_NUM_IN_COHORT", "GENDER", "RACE", "ETHNICITY", "AGE_AT_SERVICE_START", "TOTALSCORE", "Service_Type", "Setting", "Points Received: Primary Service Type")
#original_columns_to_keep <- c("UNIQUE_ID", "YOUTH_NUM_IN_COHORT", "GENDER", "RACE", "ETHNICITY",
#                              "AGE_AT_SERVICE_START", "TOTALSCORE", "Service_Type", "Setting",
#                              "Points Received:
#Primary Service Type")
# Map the original column names to the cleaned column names
lookup_table <- tibble(original = names(merged), cleaned = names(merged_clean))
cleaned_columns_to_keep <- lookup_table %>%
filter(original %in% original_columns_to_keep) %>%
pull(cleaned)
# Step 4: Subset the dataframe using the cleaned column names
merged_clean <- merged_clean %>%
select(all_of(cleaned_columns_to_keep))
# Step 5: List of variables with their types
variable_types <- list(
f = c("unique_id", "youth_num_in_cohort", "gender", "race", "ethnicity", "service_type", "setting"),
n = c("age_at_service_start", "totalscore", "points_received_primary_service_type")
)
# Step 6: Function to update variable types
update_variable_types <- function(df, variable_types) {
for (type in names(variable_types)) {
vars <- variable_types[[type]]
if (type == "n") {
df <- df %>%
mutate(across(all_of(vars), ~ as.numeric(as.character(.))))
} else if (type == "f") {
df <- df %>%
mutate(across(all_of(vars), ~ as.factor(.)))
}
return(df)
}
# Step 7: Update the variable types
merged_clean <- update_variable_types(merged_clean, variable_types)
rm(list=ls())
library(tidyverse)
# Define the clean_variable_names function
clean_variable_names <- function(df) {
cleaned_names <- df %>%
names() %>%
str_replace_all("[^[:alnum:]_]", "_") %>%  # Replace non-alphanumeric characters with _
str_replace_all("__+", "_") %>%  # Replace multiple underscores with a single one
str_replace_all("[\r\n\t]", "") %>%  # Remove newline and tab characters
str_trim() %>%  # Trim leading and trailing spaces
str_remove("_$") %>%  # Remove trailing underscores
tolower()  # Convert to lowercase
# Resolve duplicates by appending a unique suffix with underscore
cleaned_names <- make.unique(cleaned_names, sep = "_")
names(df) <- cleaned_names
return(df)
}
# Example usage:
# Read the CSV file
merged <- read_csv("/Users/shawes/PA_JCMS/data/Merged_Files_NoRecid.csv", col_types = cols(.default = "c"))
# Clean the column names
merged_clean <- clean_variable_names(merged)
# Verify the cleaned names
print(names(merged_clean))
rm(list=ls())
#| echo: true
#| messages: FALSE
#| warning: FALSE
#| output: FALSE
knitr::opts_chunk$set(
echo = T, message = F, warning = F, error = F,
comment = NA, cache = T, code_folding = T,
R.options = list(width = 220, digits = 3),
fig.align = "center",
out.width = "75%", fig.asp = .75
)
#| echo: true
#| warning: false
#| output: false
library(tidyverse)
library(readxl)
library(gtsummary)
library(DT)
library(patchwork)
library(dlookr)
library(kableExtra)
library(knitr)
library(openxlsx)
library(psych)
library(janitor)
library(stringr)
#| echo: true
#| messages: FALSE
#| warning: FALSE
#| output: FALSE
knitr::opts_chunk$set(
echo = T, message = F, warning = F, error = F,
comment = NA, cache = T, code_folding = T,
R.options = list(width = 220, digits = 3),
fig.align = "center",
out.width = "75%", fig.asp = .75
)
#| echo: true
#| warning: false
#| output: false
library(tidyverse)
library(readxl)
library(gtsummary)
library(DT)
library(patchwork)
library(dlookr)
library(kableExtra)
library(knitr)
library(openxlsx)
library(psych)
library(janitor)
library(stringr)
library(tidyverse)
# Define the clean_variable_names function
clean_variable_names <- function(df) {
cleaned_names <- df %>%
names() %>%
str_replace_all("[^[:alnum:]_]", "_") %>%  # Replace non-alphanumeric characters with _
str_replace_all("__+", "_") %>%  # Replace multiple underscores with a single one
str_replace_all("[\r\n\t]", "") %>%  # Remove newline and tab characters
str_trim() %>%  # Trim leading and trailing spaces
str_remove("_$") %>%  # Remove trailing underscores
tolower()  # Convert to lowercase
# Resolve duplicates by appending a unique suffix with underscore
cleaned_names <- make.unique(cleaned_names, sep = "_")
names(df) <- cleaned_names
return(df)
}
# Example usage:
# Read the CSV file
merged <- read_csv("/Users/shawes/PA_JCMS/data/Merged_Files_NoRecid.csv", col_types = cols(.default = "c"))
# Clean the column names
merged_clean <- clean_variable_names(merged)
# Verify the cleaned names
print(names(merged_clean))
rm(list=ls())
library(tidyverse)
# Define the clean_variable_names function
clean_variable_names <- function(df) {
cleaned_names <- df %>%
names() %>%
str_replace_all("[^[:alnum:]_]", "_") %>%  # Replace non-alphanumeric characters with _
str_replace_all("__+", "_") %>%  # Replace multiple underscores with a single one
str_replace_all("[\r\n\t]", "") %>%  # Remove newline and tab characters
str_trim() %>%  # Trim leading and trailing spaces
str_remove("_$") %>%  # Remove trailing underscores
tolower()  # Convert to lowercase
# Resolve duplicates by appending a unique suffix with underscore
cleaned_names <- make.unique(cleaned_names, sep = "_")
names(df) <- cleaned_names
return(df)
}
# Example usage:
# Read the CSV file
merged <- read_csv("/Users/shawes/PA_JCMS/data/Merged_Files_NoRecid.csv", col_types = cols(.default = "c"))
# Clean the column names
merged_clean <- clean_variable_names(merged)
# Verify the cleaned names
print(names(merged_clean))
# Select the specified variables to create the new dataframe
variables_to_keep <- c(
"unique_id","youth_num_in_cohort","gender","race","ethnicity","racnicity","age_at_service_start","age_at_first_referral_date","assessment_type","total_risk_desc","totalscore","priorscore","familyscore","educationscore","peerscore","substancescore","leisurescore","personalityscore","attitudesscore","spep_id","time","total_weeks_of_service","total_hours_of_service","was_there_service_interruption_of_30_days_or_more","was_youth_discharged_earlier_than_anticipated","anticipated_of_youth","total_of_youth","service_type","target_dosage","target_duration","setting","service_type_1","primary_therapeutic_category","total_of_youth_in_cohort_amount_of_service","number_of_youth_scoring_low_on_the_yls","number_of_youth_scoring_moderate_on_the_yls","number_of_youth_scoring_high_on_the_yls","number_of_youth_scoring_very_high_on_the_yls","points_received_primary_service_type","points_received_supplemental_service_provided","points_received_quality_of_service_delivery","points_received_amount_of_service_duration","points_received_amount_of_service_contact_hours","points_received_risk_level_of_youth_youth_scoring_above_low_on_the_yls","points_received_risk_level_of_youth_youth_scoring_above_moderate_on_the_yls","basic_score_total_raw_points_earned","maximum_total_points_possible_for_service_type_denominator_for_pop_score","pop_score_basic_score_divided_by_max_pts_possible_for_service_type","quality_measures_received_organizational_response_to_drift","total_quality_measures_received","quality_of_service_delivery","total_pts_amount_of_service","total_pts_risk_level","basic_score_description_pa_validation_study_2020","pop_score_description_pa_validation_study_2020","target_weeks","target_hours"
)
# Create the new dataframe with the specified variables
merged_clean <- merged_clean %>%
select(all_of(variables_to_keep))
# Verify the new dataframe
str(merged_clean)
## Set variable types
# List of variables with their types
variable_types <- c(
"f" = c("unique_id","youth_num_in_cohort","spep_id","time","gender","race","ethnicity","racnicity","assessment_type","total_risk_desc","was_there_service_interruption_of_30_days_or_more","was_youth_discharged_earlier_than_anticipated","service_type","setting","service_type_1", "primary_therapeutic_category","quality_of_service_delivery","basic_score_description_pa_validation_study_2020" ,"pop_score_description_pa_validation_study_2020"),
"n" = c("age_at_service_start","age_at_first_referral_date","totalscore","priorscore","familyscore","educationscore","peerscore","substancescore","leisurescore","personalityscore","attitudesscore","total_weeks_of_service","total_hours_of_service","anticipated_of_youth","total_of_youth","target_dosage","target_duration","total_of_youth_in_cohort_amount_of_service","number_of_youth_scoring_low_on_the_yls","number_of_youth_scoring_moderate_on_the_yls","number_of_youth_scoring_high_on_the_yls","number_of_youth_scoring_very_high_on_the_yls","points_received_primary_service_type","points_received_supplemental_service_provided","points_received_quality_of_service_delivery","points_received_amount_of_service_duration","points_received_amount_of_service_contact_hours","points_received_risk_level_of_youth_youth_scoring_above_low_on_the_yls","points_received_risk_level_of_youth_youth_scoring_above_moderate_on_the_yls","basic_score_total_raw_points_earned","maximum_total_points_possible_for_service_type_denominator_for_pop_score","pop_score_basic_score_divided_by_max_pts_possible_for_service_type","quality_measures_received_organizational_response_to_drift","total_quality_measures_received","total_pts_amount_of_service","total_pts_risk_level","target_weeks","target_hours")
# Function to update variable types
update_variable_types <- function(merged_clean, variable_types) {
variable_types <- c(
"f" = c("unique_id","youth_num_in_cohort","spep_id","time","gender","race","ethnicity","racnicity","assessment_type","total_risk_desc","was_there_service_interruption_of_30_days_or_more","was_youth_discharged_earlier_than_anticipated","service_type","setting","service_type_1", "primary_therapeutic_category","quality_of_service_delivery","basic_score_description_pa_validation_study_2020" ,"pop_score_description_pa_validation_study_2020"),
"n" = c("age_at_service_start","age_at_first_referral_date","totalscore","priorscore","familyscore","educationscore","peerscore","substancescore","leisurescore","personalityscore","attitudesscore","total_weeks_of_service","total_hours_of_service","anticipated_of_youth","total_of_youth","target_dosage","target_duration","total_of_youth_in_cohort_amount_of_service","number_of_youth_scoring_low_on_the_yls","number_of_youth_scoring_moderate_on_the_yls","number_of_youth_scoring_high_on_the_yls","number_of_youth_scoring_very_high_on_the_yls","points_received_primary_service_type","points_received_supplemental_service_provided","points_received_quality_of_service_delivery","points_received_amount_of_service_duration","points_received_amount_of_service_contact_hours","points_received_risk_level_of_youth_youth_scoring_above_low_on_the_yls","points_received_risk_level_of_youth_youth_scoring_above_moderate_on_the_yls","basic_score_total_raw_points_earned","maximum_total_points_possible_for_service_type_denominator_for_pop_score","pop_score_basic_score_divided_by_max_pts_possible_for_service_type","quality_measures_received_organizational_response_to_drift","total_quality_measures_received","total_pts_amount_of_service","total_pts_risk_level","target_weeks","target_hours")
# List of variables with their types
variable_types <- c(
"f" = c("unique_id","youth_num_in_cohort","spep_id","time","gender","race","ethnicity","racnicity","assessment_type","total_risk_desc","was_there_service_interruption_of_30_days_or_more","was_youth_discharged_earlier_than_anticipated","service_type","setting","service_type_1", "primary_therapeutic_category","quality_of_service_delivery","basic_score_description_pa_validation_study_2020" ,"pop_score_description_pa_validation_study_2020"),
"n" = c("age_at_service_start","age_at_first_referral_date","totalscore","priorscore","familyscore","educationscore","peerscore","substancescore","leisurescore","personalityscore","attitudesscore","total_weeks_of_service","total_hours_of_service","anticipated_of_youth","total_of_youth","target_dosage","target_duration","total_of_youth_in_cohort_amount_of_service","number_of_youth_scoring_low_on_the_yls","number_of_youth_scoring_moderate_on_the_yls","number_of_youth_scoring_high_on_the_yls","number_of_youth_scoring_very_high_on_the_yls","points_received_primary_service_type","points_received_supplemental_service_provided","points_received_quality_of_service_delivery","points_received_amount_of_service_duration","points_received_amount_of_service_contact_hours","points_received_risk_level_of_youth_youth_scoring_above_low_on_the_yls","points_received_risk_level_of_youth_youth_scoring_above_moderate_on_the_yls","basic_score_total_raw_points_earned","maximum_total_points_possible_for_service_type_denominator_for_pop_score","pop_score_basic_score_divided_by_max_pts_possible_for_service_type","quality_measures_received_organizational_response_to_drift","total_quality_measures_received","total_pts_amount_of_service","total_pts_risk_level","target_weeks","target_hours")
)
# Function to update variable types
update_variable_types <- function(merged_clean, variable_types) {
for (type in names(variable_types)) {
vars <- variable_types[[type]]
if (type == "n") {
merged_clean <- merged_clean %>%
mutate(across(all_of(vars), as.numeric))
} else if (type == "f") {
merged_clean <- merged_clean %>%
mutate(across(all_of(vars), as.factor))
}
return(merged_clean)
}
# Update the variable types
merged_clean <- update_variable_types(merged_clean, variable_types)
# Verify the changes
str(merged_clean)
## Set variable types
# List of variables to convert to factor
factor_vars <- c("unique_id","youth_num_in_cohort","spep_id","time","gender","race","ethnicity","racnicity","assessment_type","total_risk_desc","was_there_service_interruption_of_30_days_or_more","was_youth_discharged_earlier_than_anticipated","service_type","setting","service_type_1", "primary_therapeutic_category","quality_of_service_delivery","basic_score_description_pa_validation_study_2020" ,"pop_score_description_pa_validation_study_2020")
numeric_vars <- c("age_at_service_start","age_at_first_referral_date","totalscore","priorscore","familyscore","educationscore","peerscore","substancescore","leisurescore","personalityscore","attitudesscore","total_weeks_of_service","total_hours_of_service","anticipated_of_youth","total_of_youth","target_dosage","target_duration","total_of_youth_in_cohort_amount_of_service","number_of_youth_scoring_low_on_the_yls","number_of_youth_scoring_moderate_on_the_yls","number_of_youth_scoring_high_on_the_yls","number_of_youth_scoring_very_high_on_the_yls","points_received_primary_service_type","points_received_supplemental_service_provided","points_received_quality_of_service_delivery","points_received_amount_of_service_duration","points_received_amount_of_service_contact_hours","points_received_risk_level_of_youth_youth_scoring_above_low_on_the_yls","points_received_risk_level_of_youth_youth_scoring_above_moderate_on_the_yls","basic_score_total_raw_points_earned","maximum_total_points_possible_for_service_type_denominator_for_pop_score","pop_score_basic_score_divided_by_max_pts_possible_for_service_type","quality_measures_received_organizational_response_to_drift","total_quality_measures_received","total_pts_amount_of_service","total_pts_risk_level","target_weeks","target_hours")
# # List of variables with their types
# variable_types <- c(
#   "f" = c("unique_id","youth_num_in_cohort","spep_id","time","gender","race","ethnicity","racnicity","assessment_type","total_risk_desc","was_there_service_interruption_of_30_days_or_more","was_youth_discharged_earlier_than_anticipated","service_type","setting","service_type_1", "primary_therapeutic_category","quality_of_service_delivery","basic_score_description_pa_validation_study_2020" ,"pop_score_description_pa_validation_study_2020"),
#   "n" = c("age_at_service_start","age_at_first_referral_date","totalscore","priorscore","familyscore","educationscore","peerscore","substancescore","leisurescore","personalityscore","attitudesscore","total_weeks_of_service","total_hours_of_service","anticipated_of_youth","total_of_youth","target_dosage","target_duration","total_of_youth_in_cohort_amount_of_service","number_of_youth_scoring_low_on_the_yls","number_of_youth_scoring_moderate_on_the_yls","number_of_youth_scoring_high_on_the_yls","number_of_youth_scoring_very_high_on_the_yls","points_received_primary_service_type","points_received_supplemental_service_provided","points_received_quality_of_service_delivery","points_received_amount_of_service_duration","points_received_amount_of_service_contact_hours","points_received_risk_level_of_youth_youth_scoring_above_low_on_the_yls","points_received_risk_level_of_youth_youth_scoring_above_moderate_on_the_yls","basic_score_total_raw_points_earned","maximum_total_points_possible_for_service_type_denominator_for_pop_score","pop_score_basic_score_divided_by_max_pts_possible_for_service_type","quality_measures_received_organizational_response_to_drift","total_quality_measures_received","total_pts_amount_of_service","total_pts_risk_level","target_weeks","target_hours")
# )
# Convert specified columns to factor and numeric
merged_clean <- merged_clean %>%
mutate(across(all_of(factor_vars), as.factor)) %>%
mutate(across(all_of(numeric_vars), as.numeric))
# Verify the changes
str(merged_clean)
View(merged_clean)
